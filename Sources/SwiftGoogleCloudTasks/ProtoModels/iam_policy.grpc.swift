//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/iam/v1/iam_policy.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Google_Iam_V1_IAMPolicyServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Iam_V1_IAMPolicyService {
  func setIamPolicy(_ request: Google_Iam_V1_SetIamPolicyRequest, callOptions: CallOptions?) -> UnaryCall<Google_Iam_V1_SetIamPolicyRequest, Google_Iam_V1_Policy>
  func getIamPolicy(_ request: Google_Iam_V1_GetIamPolicyRequest, callOptions: CallOptions?) -> UnaryCall<Google_Iam_V1_GetIamPolicyRequest, Google_Iam_V1_Policy>
  func testIamPermissions(_ request: Google_Iam_V1_TestIamPermissionsRequest, callOptions: CallOptions?) -> UnaryCall<Google_Iam_V1_TestIamPermissionsRequest, Google_Iam_V1_TestIamPermissionsResponse>
}

public final class Google_Iam_V1_IAMPolicyServiceClient: GRPCClient, Google_Iam_V1_IAMPolicyService {
  public let connection: ClientConnection
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.iam.v1.IAMPolicy service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to SetIamPolicy.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetIamPolicy.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setIamPolicy(_ request: Google_Iam_V1_SetIamPolicyRequest, callOptions: CallOptions? = nil) -> UnaryCall<Google_Iam_V1_SetIamPolicyRequest, Google_Iam_V1_Policy> {
    return self.makeUnaryCall(path: "/google.iam.v1.IAMPolicy/SetIamPolicy",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to GetIamPolicy.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetIamPolicy.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getIamPolicy(_ request: Google_Iam_V1_GetIamPolicyRequest, callOptions: CallOptions? = nil) -> UnaryCall<Google_Iam_V1_GetIamPolicyRequest, Google_Iam_V1_Policy> {
    return self.makeUnaryCall(path: "/google.iam.v1.IAMPolicy/GetIamPolicy",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to TestIamPermissions.
  ///
  /// - Parameters:
  ///   - request: Request to send to TestIamPermissions.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func testIamPermissions(_ request: Google_Iam_V1_TestIamPermissionsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Google_Iam_V1_TestIamPermissionsRequest, Google_Iam_V1_TestIamPermissionsResponse> {
    return self.makeUnaryCall(path: "/google.iam.v1.IAMPolicy/TestIamPermissions",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Iam_V1_IAMPolicyProvider: CallHandlerProvider {
  func setIamPolicy(request: Google_Iam_V1_SetIamPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_Policy>
  func getIamPolicy(request: Google_Iam_V1_GetIamPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_Policy>
  func testIamPermissions(request: Google_Iam_V1_TestIamPermissionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Iam_V1_TestIamPermissionsResponse>
}

extension Google_Iam_V1_IAMPolicyProvider {
  public var serviceName: String { return "google.iam.v1.IAMPolicy" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "SetIamPolicy":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.setIamPolicy(request: request, context: context)
        }
      }

    case "GetIamPolicy":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getIamPolicy(request: request, context: context)
        }
      }

    case "TestIamPermissions":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.testIamPermissions(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}


/// Provides conformance to `GRPCPayload` for the request and response messages
//extension Google_Iam_V1_SetIamPolicyRequest: GRPCProtobufPayload {}
//extension Google_Iam_V1_Policy: GRPCProtobufPayload {}
//extension Google_Iam_V1_GetIamPolicyRequest: GRPCProtobufPayload {}
//extension Google_Iam_V1_TestIamPermissionsRequest: GRPCProtobufPayload {}
//extension Google_Iam_V1_TestIamPermissionsResponse: GRPCProtobufPayload {}
//
